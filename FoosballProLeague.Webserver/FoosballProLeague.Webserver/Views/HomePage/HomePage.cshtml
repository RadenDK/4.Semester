@model List<FoosballProLeague.Webserver.Models.UserModel>

@{
    Layout = "_LayoutHomePage";
    var mode = ViewBag.Mode as string ?? "1v1";
    var sortedModel = mode == "1v1" ? Model?.OrderByDescending(user => user.Elo1v1).ToList() : Model?.OrderByDescending(user => user.Elo2v2).ToList();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FoosballProLeague</title>
    <link rel="stylesheet" href="~/css/HomePage.css">
    <link rel="stylesheet" href="~/css/layoutHomepage.css">
</head>
<body>
    <div class="container">
        <main class="main">
            <section class="leaderboard-section">
                <div class="leaderboard">
                    <div class="leaderboard-header">
                        <h2>Leaderboard</h2>
                        <a href="/HomePage/1v1" class="elo-button @(mode == "1v1" ? "active" : "")">1v1</a>
                        <a href="/HomePage/2v2" class="elo-button @(mode == "2v2" ? "active" : "")">2v2</a>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Name</th>
                                <th>Elo</th>
                            </tr>
                        </thead>
                        <tbody id="leaderboardBody">
                            @if (sortedModel != null && sortedModel.Count > 0)
                            {
                                @for (int i = 0; i < sortedModel.Count; i++)
                                {
                                    <tr>
                                        <td>@(i + 1)</td>
                                        <td>@sortedModel[i].FirstName @sortedModel[i].LastName</td>
                                        <td>@(mode == "1v1" ? sortedModel[i].Elo1v1 : sortedModel[i].Elo2v2)</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="3">No users available</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </section>

            <section class="match-section">
                <section class="ongoing-match-section">
                    <div class="ongoing-match">
                        <h2>Ongoing match</h2>
                        <div class="match-info">
                            <div class="match-time">02:05</div>
                            <div class="match-score">
                                <span class="team">Carl</span> <span class="score">4 - 0</span> <span class="team">Olivier</span>
                            </div>
                        </div>
                    </div>
                </section>

                <section class="match-history-section">
                    <div class="match-history">
                        <h2>Match history</h2>
                        <div class="history-item">
                            <span class="match">Carl vs Olivier</span> <span class="score">10 - 4</span> <span class="points">10 pt</span>
                        </div>
                    </div>
                </section>
            </section>
        </main>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:5001/leaderboardHub")  // Your API's URL
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function start() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        connection.onclose(async () => {
            await start();
        });

        start();

        connection.on("ReceiveLeaderboardUpdate", function (leaderboard) {
            console.log("Received leaderboard update", leaderboard);
            updateLeaderboard(leaderboard);
        });

        function updateLeaderboard(leaderboard) {
            console.log("Updating leaderboard UI");
            const leaderboardBody = document.querySelector('#leaderboardBody');
            leaderboardBody.innerHTML = '';

            leaderboard.forEach((player, index) => {
                const row = `
            <tr>
                <td>${index + 1}</td>
                <td>${player.firstName} ${player.lastName}</td>
                <td>${player.elo1v1}</td>
            </tr>
        `;
                leaderboardBody.innerHTML += row;
            });
            console.log("Leaderboard UI updated");
        }
    </script>
</body>
</html>
